// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// ParseWithClaims provides a mock function with given fields: tokenString, claims, keyFunc
func (_m *Parser) ParseWithClaims(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc) (*jwt.Token, error) {
	ret := _m.Called(tokenString, claims, keyFunc)

	if len(ret) == 0 {
		panic("no return value specified for ParseWithClaims")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc) (*jwt.Token, error)); ok {
		return rf(tokenString, claims, keyFunc)
	}
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc) *jwt.Token); ok {
		r0 = rf(tokenString, claims, keyFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, jwt.Claims, jwt.Keyfunc) error); ok {
		r1 = rf(tokenString, claims, keyFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
